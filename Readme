# Water Potability Detection Using Machine Learning

## Overview
This project focuses on predicting the potability of water using machine learning algorithms. By analyzing key water quality parameters such as pH, hardness, and total dissolved solids (TDS), the model classifies water as potable (safe to drink) or non-potable. This initiative aims to contribute to ensuring access to clean and safe drinking water, aligning with the United Nations Sustainable Development Goal 6 (Clean Water and Sanitation).


---

## Features
- Analysis of water quality parameters: pH, hardness, TDS, etc.
- Supervised machine learning for binary classification.
- Exploratory Data Analysis (EDA) to understand data trends and patterns.
- Model evaluation using metrics like accuracy, precision, recall, and F1-score.
- User-friendly scripts for data preprocessing, training, and testing.

---

## Dataset
The dataset contains water quality metrics and a target column indicating potability (1 for potable, 0 for non-potable). The key features include:
- **pH**: Acidity or alkalinity of water.
- **Hardness**: Concentration of calcium and magnesium.
- **Total Dissolved Solids (TDS)**: Mineral content in water.
- **Chloramines**: Level of chloramines used for disinfection.
- **Conductivity**: Waterâ€™s ability to conduct electricity.
- **Organic Carbon**: Organic compounds present in water.
- **Trihalomethanes (THMs)**: Byproducts of chlorination.
- **Turbidity**: Clarity of water.

> **Source**: https://www.kaggle.com/datasets/adityakadiwal/water-potability

---

## Technologies Used
- **Programming Language**: Python
- **Libraries**: 
  - Data Analysis: Pandas, NumPy
  - Visualization: Matplotlib, Seaborn
  - Machine Learning: Scikit-learn

---

## Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/Vaishnavi-M-1909/water-potability
   cd water-potability
   ```

---

## Usage

1. Ensure the dataset is available in the `data/` directory as `water_potability.csv`.
2. Run the EDA script to analyze the data:
   ```bash
   python eda.py
   ```
3. Train the machine learning model:
   ```bash
   python train_model.py
   ```
4. Test the model and view predictions:
   ```bash
   python test_model.py
   ```

---

## Results
The project achieved the following performance metrics(eg: Using Logistic Regression):
- **Accuracy**: 62.84%
- **Precision**: 63%
- **Recall**: 100%
- **F1-score**: 77%

> *Detailed evaluation results are available in the `results/` directory.*

---

## Future Improvements
- Implementing advanced machine learning algorithms such as Random Forests and Gradient Boosting.
- Incorporating hyperparameter tuning using GridSearchCV.
- Deploying the model as a web application using Flask or Streamlit.
- Enhancing the dataset by including real-world data from water quality monitoring systems.

---

## Contributing
Contributions are welcome! If you have suggestions or enhancements, please fork the repository and submit a pull request. Alternatively, feel free to raise an issue for discussion.


---

## Acknowledgments
- **Dataset**: https://www.kaggle.com/datasets/adityakadiwal/water-potability
- **Inspiration**: The need for accessible and reliable water quality detection tools.
- **Support**: Open-source communities and online resources.

---
